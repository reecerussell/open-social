// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository/follower_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFollowerRepository is a mock of FollowerRepository interface.
type MockFollowerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFollowerRepositoryMockRecorder
}

// MockFollowerRepositoryMockRecorder is the mock recorder for MockFollowerRepository.
type MockFollowerRepositoryMockRecorder struct {
	mock *MockFollowerRepository
}

// NewMockFollowerRepository creates a new mock instance.
func NewMockFollowerRepository(ctrl *gomock.Controller) *MockFollowerRepository {
	mock := &MockFollowerRepository{ctrl: ctrl}
	mock.recorder = &MockFollowerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowerRepository) EXPECT() *MockFollowerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFollowerRepository) Create(ctx context.Context, userID int, followerReferenceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, followerReferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFollowerRepositoryMockRecorder) Create(ctx, userID, followerReferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFollowerRepository)(nil).Create), ctx, userID, followerReferenceID)
}

// Delete mocks base method.
func (m *MockFollowerRepository) Delete(ctx context.Context, userID int, followerReferenceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, followerReferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFollowerRepositoryMockRecorder) Delete(ctx, userID, followerReferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFollowerRepository)(nil).Delete), ctx, userID, followerReferenceID)
}
