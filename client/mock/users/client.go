// Code generated by MockGen. DO NOT EDIT.
// Source: ../users/client.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	users "github.com/reecerussell/open-social/client/users"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClient) Create(in *users.CreateUserRequest) (*users.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", in)
	ret0, _ := ret[0].(*users.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), in)
}

// GetClaims mocks base method.
func (m *MockClient) GetClaims(in *users.GetClaimsRequest) (*users.GetClaimsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaims", in)
	ret0, _ := ret[0].(*users.GetClaimsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaims indicates an expected call of GetClaims.
func (mr *MockClientMockRecorder) GetClaims(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaims", reflect.TypeOf((*MockClient)(nil).GetClaims), in)
}

// GetIDByReference mocks base method.
func (m *MockClient) GetIDByReference(referenceID string) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByReference", referenceID)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByReference indicates an expected call of GetIDByReference.
func (mr *MockClientMockRecorder) GetIDByReference(referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByReference", reflect.TypeOf((*MockClient)(nil).GetIDByReference), referenceID)
}

// GetProfile mocks base method.
func (m *MockClient) GetProfile(username, userReferenceID string) (*users.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", username, userReferenceID)
	ret0, _ := ret[0].(*users.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockClientMockRecorder) GetProfile(username, userReferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockClient)(nil).GetProfile), username, userReferenceID)
}

// GetInfo mocks base method.
func (m *MockClient) GetInfo(userReferenceID string) (*users.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", userReferenceID)
	ret0, _ := ret[0].(*users.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockClientMockRecorder) GetInfo(userReferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockClient)(nil).GetInfo), userReferenceID)
}
